{"version":3,"sources":["lib/bluetooth.js","lib/sbrick.js","view/App.s.js","components/RangeController/RangeController.s.js","components/RangeController/RangeController.js","utils/fullscreen.js","view/App.js","serviceWorker.js","index.js"],"names":["WebBluetooth","encoder","TextEncoder","decoder","TextDecoder","Object","classCallCheck","this","device","server","_characteristics","Map","_debug","_connected","createClass","key","value","gatt","connected","options","services","_this","navigator","bluetooth","requestDevice","then","_log","name","id","connect","Promise","all","keys","map","serviceId","getPrimaryService","service","characteristics","characteristicId","_cacheCharacteristic","catch","e","_error","_this2","resolve","reject","isConnected","disconnect","characteristicUuid","_this3","characteristic","get","readValue","buffer","DataView","uuid","_this4","writeValue","msg","console","debug","log","_this5","getCharacteristic","set","data","decode","encode","SBrick","CMD_BREAK","CMD_ADC","CMD_ADC_VOLT","PORTS","portId","channelsId","OUTPUT","CLOCKWISE","COUNTERCLOCKWISE","MIN","MAX","sbrick_name","webbluetooth","NAME","PORT0","TOPLEFT","PORT1","BOTTOMLEFT","PORT2","TOPRIGHT","PORT3","BOTTOMRIGHT","CW","CCW","SERVICES","keepalive","ports","power","direction","mode","busy","maxConcurrent","maxQueue","Infinity","queue","Queue","setConnection","_characteristics2","_this$SERVICES","defineProperty","optionalServices","filters","namePrefix","acceptAllDevices","getFirmwareVersion","version","parseFloat","_keepalive","stopAll","clearInterval","_deviceInfo","portObj","arguments","undefined","_pvm","port","Math","min","max","parseInt","abs","add","writeCharacteristicValue","Uint8Array","portData","_getPortData","_sendPortChangeEvent","portObjs","Array","isArray","array","_getPorts","forEach","push","isNaN","_portsIdle","_setPortsBusy","command","index","toString","returnData","portIds","portsToUpdate","length","concat","stop","_volt","volt","fahrenheit","_temp","temp","sensorSeries","_this6","newPortStatus","drive","channels","_getPortChannels","_adc","arrayData","i","byteLength","getUint16","sensorData","type","voltage","ch0_raw","ch1_raw","typeId","round","uuid_characteristic","_this7","readCharacteristicValue","str","String","fromCharCode","getUint8","_this8","setInterval","getQueueLength","array_channels","_this9","_this10","update_pvm","srt","_delay","getInt16","obj","t","setTimeout","event","CustomEvent","detail","document","body","dispatchEvent","_this11","allAreIdle","status","_this12","AppContainer","styled","div","_templateObject","Header","_templateObject2","ControlWrapper","_templateObject3","Title","h3","_templateObject4","BluetoothIconButton","_ref","props","objectWithoutProperties","react_default","a","createElement","IconButton_default","_templateObject5","FullScreenIconButton","IconButton","_templateObject6","LightsIconButton","_ref2","lights","Fab_default","_templateObject7","ControllerWrapper","RangeController_s_templateObject","Controller","input","RangeController_s_templateObject2","RangeComponent","_React$Component","possibleConstructorReturn","getPrototypeOf","call","handleOnChange","_this$props$sbrick","sbrick","left","target","setState","setSbrickDriveValue","val","_this$props$sbrick2","state","MIN_VALUE","MAX_VALUE","inherits","onChange","onTouchEnd","onMouseUp","React","Component","fullScreen","exitFullscreen","mozCancelFullScreen","webkitExitFullscreen","msExitFullscreen","elem","documentElement","requestFullscreen","mozRequestFullScreen","webkitRequestFullscreen","msRequestFullscreen","openCloseFullscreen","App","setConnect","getBluetoothButton","BluetoothConnected_default","Bluetooth_default","getFullScrennButton","FullscreenExit_default","Fullscreen_default","handleBluetoothButtonClick","handleFullScreenButtonClick","handleLightsButtonClick","lightsPower","leftMotor","rightMotor","onClick","WbSunny_default","fontSize","RangeController_RangeComponent","right","Boolean","window","location","hostname","match","ReactDOM","render","view_App","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.97a75179.chunk.js","sourcesContent":["/*\n * Copyright (c) 2016-17 Francesco Marino\n *\n * @author Francesco Marino <francesco@360fun.net>\n * @website www.360fun.net\n *\n * This is just a basic Class to start playing with the new Web Bluetooth API,\n * specifications can change at any time so keep in mind that all of this is\n * mostly experimental! ;)\n *\n * Check your browser and platform implementation status first\n * https://github.com/WebBluetoothCG/web-bluetooth/blob/gh-pages/implementation-status.md\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nexport const WebBluetooth = (function() {\n\t'use strict';\n\n\t// UTF-8\n\tlet encoder = new TextEncoder('utf-8');\n  let decoder = new TextDecoder('utf-8');\n\n\tclass WebBluetooth {\n\n\t\tconstructor() {\n      this.device           = null;\n      this.server           = null;\n      this._characteristics = new Map();\n\t\t\tthis._debug           = false;\n\t\t\tthis._connected       = false;\n    }\n\n\t\tisConnected() {\n\t\t\treturn this.device && this.device.gatt.connected && this._connected;\n\t\t}\n\n\t\tconnect(options,services) {\n\t\t\treturn navigator.bluetooth.requestDevice(options)\n      .then(device => {\n        this.device = device;\n\t\t\t\tthis._log('Connected to device named \"' + device.name + '\" with ID \"' + device.id + '\"');\n        return device.gatt.connect();\n\t\t\t})\n      .then(server => {\n        this.server = server;\n\t\t\t\treturn Promise.all(\n\t\t\t\t\tObject.keys(services).map( serviceId => {\n\t\t\t\t\t\treturn server.getPrimaryService(serviceId).then(service => {\n\t\t\t\t\t\t\treturn Promise.all(\n\t\t\t\t\t\t\t\tObject.keys(services[serviceId].characteristics).map( characteristicId => {\n\t\t\t\t\t\t\t\t\treturn this._cacheCharacteristic(service, characteristicId)\n\t\t\t\t\t\t\t\t\t.then( () => {\n\t\t\t\t\t\t\t\t\t\tthis._log('Found characteristic \"' + characteristicId + '\"');\n\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t\t.catch( e => { this._error('Characteristic \"' + characteristicId + '\" NOT found') } );\n\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t).then( () => {\n\t\t\t\t\t\t\t\treturn this._connected = true;\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.then( () => {\n\t\t\t\t\t\t\tthis._log('Found service \"' + serviceId + '\"');\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.catch( e => { this._error('Service \"' + serviceId + '\"') } );\n\t\t\t\t\t})\n\t\t\t\t);\n      });\n    }\n\n\t\tdisconnect() {\n\t\t\treturn new Promise( (resolve, reject) =>  {\n\t\t\t\t\tif( this.isConnected() ) {\n\t\t\t\t\t\tresolve();\n\t\t\t\t\t} else {\n\t\t\t\t\t\treject('Device not connected');\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t).then( ()=> {\n\t\t\t\tthis._log('Device disconnected')\n\t\t\t\tthis._connected = false;\n\t\t\t\treturn this.device.gatt.disconnect();\n\t\t\t}).catch( e => { this._error(e) } );\n\t\t}\n\n    readCharacteristicValue(characteristicUuid) {\n\t\t\treturn new Promise( (resolve, reject) =>  {\n\t\t\t\t\tif( this.isConnected() ) {\n\t\t\t\t\t\tresolve();\n\t\t\t\t\t} else {\n\t\t\t\t\t\treject('Device not connected');\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t).then( ()=> {\n\t      let characteristic = this._characteristics.get(characteristicUuid);\n\t      return characteristic.readValue()\n\t      .then(value => {\n\t        // In Chrome 50+, a DataView is returned instead of an ArrayBuffer.\n\t        value = value.buffer ? value : new DataView(value);\n\t        this._log('READ', characteristic.uuid, value);\n\t        return value;\n\t      });\n\t\t\t})\n\t\t\t.catch( e => { this._error(e) } );\n    }\n\n\t\twriteCharacteristicValue(characteristicUuid, value) {\n\t\t\treturn new Promise( (resolve, reject) =>  {\n\t\t\t\t\tif( this.isConnected() ) {\n\t\t\t\t\t\tresolve();\n\t\t\t\t\t} else {\n\t\t\t\t\t\treject('Device not connected');\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t).then( ()=> {\n\t      let characteristic = this._characteristics.get(characteristicUuid);\n\t      this._log('WRITE', characteristic.uuid, value);\n\t      return characteristic.writeValue(value);\n\t\t\t}).catch( e => { this._error(e) } );\n    }\n\n\t\t_error(msg) {\n\t\t\tif(this._debug) {\n\t\t\t\tconsole.debug(msg);\n\t\t\t} else {\n\t\t\t\tthrow msg;\n\t\t\t}\n\t\t}\n\n\t\t_log(msg) {\n\t\t\tif(this._debug) {\n\t\t\t\tconsole.log(msg);\n\t\t\t}\n\t\t}\n\n\t\t_cacheCharacteristic(service, characteristicUuid) {\n      return service.getCharacteristic(characteristicUuid)\n      .then(characteristic => {\n        this._characteristics.set(characteristicUuid, characteristic);\n      });\n    }\n\n\t\t_decodeString(data) {\n      return decoder.decode(data);\n    }\n    _encodeString(data) {\n      return encoder.encode(data);\n    }\n  }\n\n\treturn WebBluetooth;\n\n})();\n","/*\n * Copyright (c) 2016-17 Francesco Marino\n *\n * @author Francesco Marino <francesco@360fun.net>\n * @website www.360fun.net\n *\n * Requires bluetooth.js and promise-queue library\n * https://github.com/360fun/bluetooth.js\n * https://github.com/azproduction/promise-queue\n *\n * This code is compatible with SBrick Protocol 4.17\n * https://social.sbrick.com/wiki/view/pageId/11/slug/the-sbrick-ble-protocol\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport { WebBluetooth } from './bluetooth'\nimport Queue from 'promise-queue';\nexport const SBrick = (function()  {\n\t'use strict';\n\n\tconst ID_SBRICK                             = \"SBrick\";\n\tconst FIRMWARE_COMPATIBILITY                 = 4.17;\n\n\tconst UUID_SERVICE_DEVICEINFORMATION        = \"device_information\";\n\tconst UUID_CHARACTERISTIC_MODELNUMBER       = \"model_number_string\";\n\tconst UUID_CHARACTERISTIC_FIRMWAREREVISION  = \"firmware_revision_string\";\n\tconst UUID_CHARACTERISTIC_HARDWAREREVISION  = \"hardware_revision_string\";\n\tconst UUID_CHARACTERISTIC_SOFTWAREREVISION  = \"software_revision_string\";\n\tconst UUID_CHARACTERISTIC_MANUFACTURERNAME  = \"manufacturer_name_string\";\n\n\tconst UUID_SERVICE_REMOTECONTROL            = \"4dc591b0-857c-41de-b5f1-15abda665b0c\";\n\tconst UUID_CHARACTERISTIC_REMOTECONTROL     = \"02b8cbcc-0e25-4bda-8790-a15f53e6010f\";\n\tconst UUID_CHARACTERISTIC_QUICKDRIVE        = \"489a6ae0-c1ab-4c9c-bdb2-11d373c1b7fb\";\n\n\tconst UUID_SERVICE_OTA                      = \"1d14d6ee-fd63-4fa1-bfa4-8f47b42119f0\";\n\tconst UUID_CHARACTERISTIC_OTACONTROL        = \"f7bf3564-fb6d-4e53-88a4-5e37e0326063\";\n\n\t// REMOTE CONTROL COMMANDS\n\n\t// Exceptions\n\tconst ERROR_LENGTH  = 0x80; // Invalid command length\n\tconst ERROR_PARAM   = 0x81; // Invalid parameter\n\tconst ERROR_COMMAND = 0x82; // No such command\n\tconst ERROR_NOAUTH  = 0x83; // No authentication needed\n\tconst ERROR_AUTH    = 0x84; // Authentication error\n\tconst ERROR_DOAUTH  = 0x85; // Authentication needed\n\tconst ERROR_AUTHOR  = 0x86; // Authorization error\n\tconst ERROR_THERMAL = 0x87; // Thermal protection is active\n\tconst ERROR_STATE   = 0x88; // The system is in a state where the command does not make sense\n\n\t// Commands\n\tconst CMD_BREAK     = 0x00; // Stop command\n\tconst CMD_DRIVE     = 0x01; // Drive command\n\tconst CMD_ADC       = 0x0F; // Query ADC\n\tconst CMD_ADC_VOLT  = 0x08; // Get Voltage\n\tconst CMD_ADC_TEMP  = 0x09; // Get Temperature\n\tconst CMD_PVM       = 0x2C; // Periodic Voltage Measurements\n\n\t// SBrick Ports / Channels\n\tconst PORTS = [\n\t\t{ portId: 0x00, channelsId: [ 0x00, 0x01 ]},\n\t\t{ portId: 0x01, channelsId: [ 0x02, 0x03 ]},\n\t\t{ portId: 0x02, channelsId: [ 0x04, 0x05 ]},\n\t\t{ portId: 0x03, channelsId: [ 0x06, 0x07 ]}\n\t];\n\n\t// Port Mode\n\tconst INPUT  = 'input';\n\tconst OUTPUT = 'output';\n\tconst BREAK  = 'break';\n\n\t// Direction\n\tconst CLOCKWISE        = 0x00; // Clockwise\n\tconst COUNTERCLOCKWISE = 0x01; // Counterclockwise\n\n\t// Values limits\n\tconst MIN      = 0;   // No Speed\n\tconst MAX      = 255; // Max Speed\n\tconst MAX_QD   = 127; // Max Speed for QuickDrive\n\tconst MAX_VOLT = 9;   // Max Voltage = Full battery\n\n\t// Times in milliseconds\n\tconst T_KA  = 300; // Time interval for the keepalive loop (must be < 500ms - watchdog default)\n\tconst T_PVM = 500; // Time delay for PVM completion: the registry is update approximately 5 times per second (must be > 200ms)\n\n\t// Sbrick class definition\n\tclass SBrick {\n\n\t\t// CONSTRUCTOR\t\n\n\t\t/**\n\t\t* Create a new instance of the SBrick class (and accordingly also WebBluetooth)\n\t\t* @param {string} sbrick_name - The name of the sbrick\n\t\t*/\n\t\tconstructor( sbrick_name ) {\n\t\t\tthis.webbluetooth = new WebBluetooth();\n\n\t\t\t// export constants\n\t\t\tthis.NAME     = sbrick_name || \"\";\n\t\t\tthis.PORT0    = this.TOPLEFT     = PORTS[0].portId;\n\t\t\tthis.PORT1    = this.BOTTOMLEFT  = PORTS[1].portId;\n\t\t\tthis.PORT2    = this.TOPRIGHT    = PORTS[2].portId;\n\t\t\tthis.PORT3    = this.BOTTOMRIGHT = PORTS[3].portId;\n\t\t\tthis.CW       = CLOCKWISE;\n\t\t\tthis.CCW      = COUNTERCLOCKWISE;\n\t\t\tthis.MAX      = MAX;\n\t\t\tthis.SERVICES = {}\n\n\t\t\t// status\n\t\t\tthis.keepalive = null;\n\t\t\tthis.ports     = [\n\t\t\t\t{ power: MIN, direction: CLOCKWISE, mode: OUTPUT, busy: false },\n\t\t\t\t{ power: MIN, direction: CLOCKWISE, mode: OUTPUT, busy: false },\n\t\t\t\t{ power: MIN, direction: CLOCKWISE, mode: OUTPUT, busy: false },\n\t\t\t\t{ power: MIN, direction: CLOCKWISE, mode: OUTPUT, busy: false }\n\t\t\t];\n\n\t\t\t// queue\n\t\t\tthis.maxConcurrent = 1;\n\t\t\tthis.maxQueue      = Infinity;\n\t\t\tthis.queue         = new Queue( this.maxConcurrent, this.maxQueue );\n\n\t\t\t// debug\n\t\t\tthis._debug         = false;\n\n\t\t\tthis.MIN = '288'\n\t\t}\n\n\n\t\t// PUBLIC FUNCTIONS\n\n\t\t/**\n\t\t* Open the Web Bluetooth popup to search and connect the SBrick (filtered by name if previously specified)\n\t\t* @returns {promise returning undefined}\n\t\t*/\n\t\tconnect(setConnection) {\n\t\t\tthis.SERVICES = {\n\t\t\t\t[UUID_SERVICE_DEVICEINFORMATION] : {\n\t\t\t\t\tname : \"Device Information\",\n\t\t\t\t\tcharacteristics : {\n\t\t\t\t\t\t[UUID_CHARACTERISTIC_MODELNUMBER] : {\n\t\t\t\t\t\t\tname : \"Model Number String\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t[UUID_CHARACTERISTIC_FIRMWAREREVISION] : {\n\t\t\t\t\t\t\tname : \"Firmware Revision String\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t[UUID_CHARACTERISTIC_HARDWAREREVISION] : {\n\t\t\t\t\t\t\tname : \"Hardware Revision String\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t[UUID_CHARACTERISTIC_SOFTWAREREVISION] : {\n\t\t\t\t\t\t\tname : \"Software Revision String\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t[UUID_CHARACTERISTIC_MANUFACTURERNAME] : {\n\t\t\t\t\t\t\tname : \"Manufacturer Name String\"\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t[UUID_SERVICE_REMOTECONTROL] : {\n\t\t\t\t\tname : \"Remote Control\",\n\t\t\t\t\tcharacteristics : {\n\t\t\t\t\t\t[UUID_CHARACTERISTIC_REMOTECONTROL] : {\n\t\t\t\t\t\t\tname : \"Quick Drive\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t[UUID_CHARACTERISTIC_QUICKDRIVE] : {\n\t\t\t\t\t\t\tname : \"Remote Control\"\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tlet options = {\n\t\t\t\t// filter by service should work but it doesn't show any SBrick...\n\t\t\t\t// filters: [{\n\t\t\t\t// \tservices: [ UUID_SERVICE_DEVICEINFORMATION, UUID_SERVICE_OTA, UUID_SERVICE_REMOTECONTROL ]\n\t\t\t\t// }],\n\t\t\t\toptionalServices: Object.keys(this.SERVICES)\n\t\t\t};\n\n\t\t\t// if the SBrick name is not defined it shows all the devices\n\t\t\t// I don't like this solution, would be better to filter \"by services\"\n\t\t\tif( this.NAME != \"\" ) {\n\t\t\t\toptions.filters = [{\n\t\t\t\t\tnamePrefix: [ this.NAME ]\n\t\t\t\t}];\n\t\t\t} else {\n\t\t\t\toptions.acceptAllDevices = true;\n\t\t\t}\n\t\t\treturn this.webbluetooth.connect(options,this.SERVICES)\n\t\t\t.then( () => {\n\t\t\t\tsetConnection(true);\n\t\t\t\tif( this.isConnected() ) {\n\t\t\t\t\tif( this._debug ) {\n\t\t\t\t\t\tthis._log( \"Connected to SBrick \" + this.webbluetooth.device.id );\n\t\t\t\t\t}\n\t\t\t\t\t// Firmware Compatibility Check\n\t\t\t\t\tthis.getFirmwareVersion()\n\t\t\t\t\t.then( version => {\n\t\t\t\t\t\t// version = FIRMWARE_COMPATIBILITY;\n\t\t\t\t\t\tif( parseFloat(version) >= FIRMWARE_COMPATIBILITY ) {\n\t\t\t\t\t\t\tthis.keepalive = this._keepalive(this);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthis._error(\"Firmware not compatible: please update your SBrick.\");\n\t\t\t\t\t\t\tthis.disconnect();\n\t\t\t\t\t\t\tsetConnection(false);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t})\n\t\t\t.catch( e => { this._error(e) } );\n\t\t}\n\n\n\t\t/**\n\t\t* Disconnect the SBrick\n\t\t* @returns {promise returning undefined}\n\t\t*/\n\t\tdisconnect(setConnection) {\n\t\t\treturn new Promise( (resolve, reject) => {\n\t\t\t\tif( this.isConnected() ) {\n\t\t\t\t\tresolve();\n\t\t\t\t} else {\n\t\t\t\t\treject('Not connected');\n\t\t\t\t}\n\t\t\t} ).then( ()=> {\n\t\t\t\treturn this.stopAll()\n\t\t\t\t.then( ()=> {\n\t\t\t\t\tclearInterval( this.keepalive );\n\t\t\t\t\tsetConnection(false);\n\t\t\t\t\treturn this.webbluetooth.disconnect();\n\t\t\t\t} );\n\t\t\t} )\n\t\t\t.catch( e => { this._error(e) } );\n\t\t}\n\n\n\t\t/**\n\t\t* Check if the SBrick is connected to the browser\n\t\t* @returns {boolean}\n\t\t*/\n\t\tisConnected() {\n\t\t\treturn this.webbluetooth && this.webbluetooth.isConnected();\n\t\t}\n\n\t\t/**\n\t\t* Get the SBrick's model number\n\t\t* @returns {promise returning string}\n\t\t*/\n\t\tgetModelNumber() {\n\t\t\treturn this._deviceInfo(UUID_CHARACTERISTIC_MODELNUMBER);\n\t\t}\n\n\t\t/**\n\t\t* Get the SBrick's firmware version\n\t\t* @returns {promise returning string}\n\t\t*/\n\t\tgetFirmwareVersion() {\n\t\t\treturn this._deviceInfo(UUID_CHARACTERISTIC_FIRMWAREREVISION);\n\t\t}\n\n\t\t/**\n\t\t* Get the SBrick's hardware version\n\t\t* @returns {promise returning string}\n\t\t*/\n\t\tgetHardwareVersion() {\n\t\t\treturn this._deviceInfo(UUID_CHARACTERISTIC_HARDWAREREVISION);\n\t\t}\n\n\t\t/**\n\t\t* Get the SBrick's software version\n\t\t* @returns {promise returning string}\n\t\t*/\n\t\tgetSoftwareVersion() {\n\t\t\treturn this._deviceInfo(UUID_CHARACTERISTIC_SOFTWAREREVISION);\n\t\t}\n\n\t\t/**\n\t\t* Get the SBrick's manufacturer's name\n\t\t* @returns {promise returning string}\n\t\t*/\n\t\tgetManufacturerName() {\n\t\t\treturn this._deviceInfo(UUID_CHARACTERISTIC_MANUFACTURERNAME);\n\t\t}\n\n\n\t\t/**\n\t\t* Send drive command\n\t\t* @param {object} portObj - {portId, direction, power}\n\t\t*\t\tportId: {number} The index (0-3) of the port to update in the this.ports array\n\t\t*\t\tdirection: {hexadecimal number} The drive direction (0x00, 0x01 - you can use the constants SBrick.CLOCKWISE and SBrick.COUNTERCLOCKWISE)\n\t\t*\t\tpower: {number} - The power level for the drive command 0-255\n\t\t* @returns {promise returning object} - Returned object: portId, direction, power\n\t\t*/\n\t\tdrive( portObj ) {\n\t\t\tif (typeof portObj !== 'object') {\n\t\t\t\t// the old version with 3 params was used\n\t\t\t\tportObj = {\n\t\t\t\t\tportId: \t  arguments[0],\n\t\t\t\t\tdirection: \targuments[1],\n\t\t\t\t\tpower: \t\t  arguments[2]\n\t\t\t\t};\n\t\t\t\tthis._log('Calling drive with 3 arguments is deprecated: use 1 object {portId, direction, power} instead.');\n\t\t\t}\n\n\t\t\tconst portId \t\t= portObj.portId,\n\t\t\t\t\t\tdirection = portObj.direction || CLOCKWISE,\n\t\t\t\t\t\tpower \t\t= ( portObj.power === undefined ) ? MAX : portObj.power\n\n\t\t\treturn new Promise( (resolve, reject) => {\n\t\t\t\tif( portId !== undefined && direction !== undefined && power !== undefined ) {\n\t\t\t\t\tresolve();\n\t\t\t\t} else {\n\t\t\t\t\tlet msg = 'Wrong input: please specify ';\n\t\t\t\t\tif (portId === undefined) { msg += 'portId'; }\n\t\t\t\t\tif (power === undefined) {\n\t\t\t\t\t\tif (portId === undefined) {\tmsg += ' and'; }\n\t\t\t\t\t\tmsg += ' power';\n\t\t\t\t\t}\n\t\t\t\t\treject(msg);\n\t\t\t\t}\n\t\t\t} )\n\t\t\t.then( ()=> {\n\t\t\t\treturn this._pvm( { portId:portId, mode:OUTPUT } );\n\t\t\t})\n\t\t\t.then( () => {\n\t\t\t\tlet port = this.ports[portId];\n\n\t\t\t\tport.power     = Math.min(Math.max(parseInt(Math.abs(power)), MIN), MAX);\n\t\t\t\tport.direction = direction ? COUNTERCLOCKWISE : CLOCKWISE;\n\n\t\t\t\tif( !port.busy ) {\n\t\t\t\t\tport.busy = true;\n\t\t\t\t\tthis.queue.add( () => {\n\t\t\t\t\t\tport.busy = false;\n\t\t\t\t\t\treturn this.webbluetooth.writeCharacteristicValue(\n\t\t\t\t\t\t\tUUID_CHARACTERISTIC_REMOTECONTROL,\n\t\t\t\t\t\t\tnew Uint8Array([ CMD_DRIVE, PORTS[portId].portId, port.direction, port.power ])\n\t\t\t\t\t\t) }\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t})\n\t\t\t.then( () => {\n\t\t\t\t// all went well, send event and return the settings we just applied\n\t\t\t\tlet portData = this._getPortData(portId);\n\t\t\t\tthis._sendPortChangeEvent(portData);\n\t\t\t\t// return the new settings to the promise\n\t\t\t\treturn portData;\n\t\t\t})\n\t\t\t.catch( e => { this._error(e) } );\n\t\t}\n\n\n\t\t/**\n\t\t* Send quickDrive command\n\t\t* @param {array} portObjs - An array with a setting objects {port, direction, power} for every port you want to update\n\t\t* @returns {promise returning array} - Returned array: [{portId, direction, power}, {...}, {...}, {...}]\n\t\t*/\n\t\tquickDrive( portObjs ) {\n\t\t\treturn new Promise( (resolve, reject) => {\n\t\t\t\tif( Array.isArray(portObjs) ) {\n\t\t\t\t\tresolve();\n\t\t\t\t} else {\n\t\t\t\t\treject('Wrong input: quickDrive expects array');\n\t\t\t\t}\n\t\t\t} )\n\t\t\t.then( ()=> {\n\t\t\t\tlet array = [];\n\t\t\t\tlet allPorts = this._getPorts();\n\t\t\t\tallPorts.forEach( (portId) => {\n\t\t\t\t\tarray.push( {\n\t\t\t\t\t\tportId: portId,\n\t\t\t\t\t\tmode: OUTPUT\n\t\t\t\t\t} );\n\t\t\t\t});\n\t\t\t\tconsole.log(array);\n\t\t\t\treturn this._pvm( array );\n\t\t\t})\n\t\t\t.then( ()=> {\n\t\t\t\t// updating ports status\n\t\t\t\tportObjs.forEach( (portObj) => {\n\t\t      let portId = parseInt( portObj.portId );\n\t\t      if (isNaN(portId)) {\n\t\t        // the old version with port instead of portId was used\n\t\t        portId = parseInt( portObj.port );\n\t\t        this._log('object property port is deprecated. use portId instead.');\n\t\t      }\n\t\t      let port       = this.ports[portId];\n\t\t      port.power     = Math.min(Math.max(parseInt(Math.abs(portObj.power)), MIN), MAX);\n\t\t      port.direction = portObj.direction ? COUNTERCLOCKWISE : CLOCKWISE;\n\t\t    });\n\t\t\t\t// send command\n\t\t\t\tif(this._portsIdle(this._getPorts())) {\n\t\t\t\t\t// set all ports busy\n\t\t      this._setPortsBusy(this._getPorts(), true);\n\t\t\t\t\tthis.queue.add( () => {\n\t\t\t\t\t\tlet command = [];\n\t\t\t\t\t\tthis.ports.forEach( (port, index) => {\n\t\t\t\t\t\t\t\tport.busy = false;\n\t\t\t\t\t\t\t\tcommand.push( parseInt( parseInt(port.power/MAX*MAX_QD).toString(2) + port.direction, 2 ) );\n\t\t\t\t\t\t});\n\t\t\t\t\t\treturn this.webbluetooth.writeCharacteristicValue(\n\t\t\t\t\t\t\tUUID_CHARACTERISTIC_QUICKDRIVE,\n\t\t\t\t\t\t\tnew Uint8Array( command )\n\t\t\t\t\t\t);\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t})\n\t\t\t.then( () => {\n\t\t\t\t// all went well, return an array with the channels and the settings we just applied\n\t\t\t\tlet returnData = [];\n\n\t\t\t\tportObjs.forEach((portObj) => {\n\t\t\t\t\tlet portId = portObj.portId;\n\t\t\t\t\tif (portObj.port) {\n\t\t\t\t\t\t// it uses the old syntax\n\t\t\t\t\t\tportId = parseInt( portObj.port );\n\t\t\t\t\t}\n\n\t\t\t\t\t//send event for this port\n\t\t\t\t\tlet portData = this._getPortData(portId);\n\t\t\t\t\tthis._sendPortChangeEvent(portData);\n\t\t\t\t\treturnData.push(portData);\n\t\t\t\t});\n\t\t\t\treturn returnData;\n\t\t\t})\n\t\t\t.catch( e => { this._error(e) } );\n\t\t}\n\n\n\t\t/**\n\t\t* Stop a port\n\t\t* @param {number | array} portIds - The number or array of numbers of channels to stop\n\t\t* @returns {promise}\n\t\t*/\n\t\tstop( portIds ) {\n\t\t\treturn new Promise( (resolve, reject) => {\n\t\t\t\tif( portIds!==null ) {\n\t\t\t\t\tif( !Array.isArray(portIds) ) {\n\t\t\t\t\t\tportIds = [ portIds ];\n\t\t\t\t\t}\n\t\t\t\t\tresolve();\n\t\t\t\t} else {\n\t\t\t\t\treject('wrong input');\n\t\t\t\t}\n\t\t\t} )\n\t\t\t.then( ()=> {\n\t\t\t\tlet array = [];\n\t\t\t\tportIds.forEach( (portId) => {\n\t\t\t\t\tarray.push( {\n\t\t\t\t\t\tportId: portId,\n\t\t\t\t\t\tmode: BREAK\n\t\t\t\t\t} );\n\t\t\t\t});\n\t\t\t\treturn this._pvm( array );\n\t\t\t})\n\t\t\t.then( ()=> {\n\t\t\t\tlet portsToUpdate = [];\n\t\t\t\t// update object values and build the command\n\t\t\t\tportIds.forEach( (portId) => {\n\t\t\t\t\tlet port = this.ports[portId];\n\t\t\t\t\tport.power = 0;\n\t\t\t\t\tif(!port.busy) {\n\t\t\t\t\t\tportsToUpdate.push(portId);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\tif( portsToUpdate.length ) {\n\t\t\t\t\tthis._setPortsBusy(portsToUpdate, true);\n\t\t\t\t\tthis.queue.add( () => {\n\t\t\t\t\t\tthis._setPortsBusy(portsToUpdate, false);\n\t\t\t\t\t\treturn this.webbluetooth.writeCharacteristicValue(\n\t\t\t\t\t\t\tUUID_CHARACTERISTIC_REMOTECONTROL,\n\t\t\t\t\t\t\tnew Uint8Array( [ CMD_BREAK ].concat(portsToUpdate) )\n\t\t\t\t\t\t);\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t})\n\t\t\t.then( () => {\n\t\t\t\t// all went well, return an array with the channels and the settings we just applied\n\t\t\t\tlet returnData = [];\n\t\t\t\tportIds.forEach((portId) => {\n\t\t\t\t\t// send event for this port\n\t\t\t\t\tlet portData = this._getPortData(portId);\n\t\t\t\t\tthis._sendPortChangeEvent(portData);\n\t\t\t\t\treturnData.push(portData);\n\t\t\t\t});\n\t\t\t\treturn returnData;\n\t\t\t})\n\t\t\t.catch( e => { this._error(e) } );\n\t\t}\n\n\n\t\t/**\n\t\t* Stop all ports\n\t\t* @returns {promise}\n\t\t*/\n\t\tstopAll() {\n\t\t\treturn this.stop( this._getPorts() );\n\t\t}\n\n\n\t\t/**\n\t\t* Get battery percentage\n\t\t* @returns {promise returning number}\n\t\t*/\n\t\tgetBattery() {\n\t\t\treturn this._volt()\n\t\t\t.then( volt => {\n\t\t\t\treturn parseInt( Math.abs( volt / MAX_VOLT * 100 ) );\n\t\t\t});\n\t\t}\n\n\n\t\t/**\n\t\t* Get sbrick's temperature in degrees Celsius (default) or Fahrenheit\n\t\t* @param {boolean} fahrenheit - If true, temperature is returned in Fahrenheit\n\t\t* @returns {promise returning number}\n\t\t*/\n\t\tgetTemp( fahrenheit = false) {\n\t\t\treturn this._temp()\n\t\t\t.then( temp => {\n\t\t\t\tlet result = 0;\n\t\t\t\tif( fahrenheit ) {\n\t\t\t\t\tresult = temp * 9/5 + 32;\n\t\t\t\t\tresult = result; // ' °F';\n\t\t\t\t} else {\n\t\t\t\t\tresult = temp; // ' °C';\n\t\t\t\t}\n\t\t\t\treturn result;\n\t\t\t});\n\t\t}\n\n\t\t/**\n\t\t* Read sensor data on a specific PORT\n\t\t* @param {hexadecimal} portId - The index of the port in the this.ports array\n\t\t* @param {string} sensorSeries - not implemented yet - in the future it will manage different sensor series (wedo, EV3, NXT, ...)\n\t\t* @returns {promise} - sensor measurement Object (structure depends on the sensor type)\n\t\t*/\n\t\tgetSensor( portId, sensorSeries ) {\n\t\t\treturn new Promise( (resolve, reject) => {\n\t\t\t\tif( portId !== null ) {\n\t\t\t\t\tresolve();\n\t\t\t\t} else {\n\t\t\t\t\treject('wrong input');\n\t\t\t\t}\n\t\t\t}).then( () => {\n\t\t\t\tlet newPortStatus = { portId: portId, mode:INPUT };\n\t\t\t\t// reset the port if is in \"break mode\" (short circuited) or driving before activate PVM\n\t\t\t\tif(this.ports[portId].mode===BREAK || this.ports[portId].power!=0) {\n\t\t\t\t\treturn this.drive(portId,CLOCKWISE,0)\n\t\t\t\t\t.then( () => {\n\t\t\t\t\t\treturn this._pvm( newPortStatus );\n\t\t\t\t\t} );\n\t\t\t\t} else {\n\t\t\t\t\treturn this._pvm( newPortStatus );\n\t\t\t\t}\n\t\t\t}).then( () => {\n\t\t\t\tlet channels = this._getPortChannels(portId);\n\t\t\t\treturn this._adc([CMD_ADC_VOLT].concat(channels))\n\t\t\t\t.then( data => {\n\t\t\t\t\tlet arrayData = [];\n\t\t\t\t\tfor (let i = 0; i < data.byteLength; i+=2) {\n\t\t\t\t\t\tarrayData.push( data.getUint16(i, true) );\n\t\t\t\t\t}\n\t\t\t\t\tlet sensorData = {\n\t\t\t\t\t\ttype: 'unknown',\n\t\t\t\t\t\tvoltage: arrayData[0] >> 4,\n\t\t\t\t\t\tch0_raw: arrayData[1] >> 4,\n\t\t\t\t\t\tch1_raw: arrayData[2] >> 4\n\t\t\t\t\t};\n\n\t\t\t\t\t// Sensor Type Management\n\t\t\t\t\tswitch(sensorSeries) {\n\t\t\t\t\t\tcase \"wedo\":\n\t\t\t\t\t\t\tlet typeId  = Math.round( ( sensorData.ch0_raw / sensorData.voltage ) * 255 );\n\t\t\t\t\t\t\tlet value = Math.round( ( sensorData.ch1_raw / sensorData.voltage ) * 255 );\n\t\t\t\t\t\t\tsensorData.type  = ( typeId >= 48 && typeId <= 50 ) ? \"tilt\" : \"motion\";\n\t\t\t\t\t\t\tsensorData.value = value;\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tsensorData.value = sensorData.ch1_raw / sensorData.voltage;\n\t\t\t\t\t}\n\t\t\t\t\treturn sensorData;\n\t\t\t\t} );\n\t\t\t});\n\t\t}\n\n\t\t/**\n\t\t* Helper function to invert CW in CCW and vice versa\n\t\t* @param {hex number} direction\n\t\t*/\n\t\tinvDir( direction ) {\n\t\t\treturn direction ? CLOCKWISE : COUNTERCLOCKWISE;\n\t\t}\n\n\n\t\t// PRIVATE FUNCTIONS\n\n\t\t/**\n\t\t* Read some common Blutooth devices informations about the SBrick\n\t\t* @param {hexadecimal|string} uuid_characteristic\n\t\t* @returns {promise}\n\t\t*/\n\t\t_deviceInfo( uuid_characteristic ) {\n\t\t\treturn new Promise( (resolve, reject) => {\n\t\t\t\tif( typeof this.SERVICES[UUID_SERVICE_DEVICEINFORMATION].characteristics[uuid_characteristic] != 'undefined' ) {\n\t\t\t\t\tresolve();\n\t\t\t\t} else {\n\t\t\t\t\treject('Wrong input');\n\t\t\t\t}\n\t\t\t} ).then( () => {\n\t\t\t\treturn this.webbluetooth.readCharacteristicValue( uuid_characteristic )\n\t\t\t\t.then(data => {\n\t\t\t\t\tlet str = \"\";\n\t\t\t\t\tfor (let i = 0 ; i < data.byteLength ; i++) {\n\t\t\t\t\t\tstr += String.fromCharCode(data.getUint8(i));\n\t\t\t\t\t}\n\t\t\t\t\treturn str;\n\t\t\t\t})\n\t\t\t\t.catch( e => { this._error(e) } );\n\t\t\t})\n\t\t\t.catch( e => { this._error(e) } );\n\t\t}\n\n\t\t/**\n\t\t* Keep the connection alive, preventing the SBrick internal watchdog (500 millisec by default) to close it\n\t\t*/\n\t\t_keepalive() {\n\t\t\treturn setInterval( () => {\n\t\t\t\tif( !this.isConnected() ) {\n\t\t\t\t\tthis._log('Connection lost');\n\t\t\t\t\tclearInterval( this.keepalive );\n\t\t\t\t} else if( this.queue.getQueueLength() === 0 ) {\n\t\t\t\t\tthis.queue.add( () => {\n\t\t\t\t\t\treturn this.webbluetooth.writeCharacteristicValue(\n\t\t\t\t\t\t\tUUID_CHARACTERISTIC_REMOTECONTROL,\n\t\t\t\t\t\t\tnew Uint8Array( [ CMD_ADC, CMD_ADC_TEMP ] )\n\t\t\t\t\t\t);\n\t\t\t\t\t} );\n\t\t\t\t}\n\t\t\t}, T_KA);\n\t\t}\n\n\t\t/**\n\t\t* Read the ADC sensor \"variables\" where each specific channel values are stored\n\t\t* every PORT has 2 channels so use CHANNEL[0-7] to read sensor data\n\t\t* the remaining 2 channels are for the chip TEMPERATURE (0x08) and battery VOLTAGE (0x09)\n\t\t* @param {array} array_channels - an array of channels CHANNEL[0-7], TEMPERATURE or VOLTAGE\n\t\t* @returns {promise} - voltage measurement\n\t\t*/\n\t\t_adc( array_channels ) {\n\t\t\treturn this.queue.add( () => {\n\t\t\t\tlet ports = Array.isArray(array_channels) ? array_channels : [array_channels];\n\t\t\t\treturn this.webbluetooth.writeCharacteristicValue(\n\t\t\t\t\tUUID_CHARACTERISTIC_REMOTECONTROL,\n\t\t\t\t\tnew Uint8Array([CMD_ADC].concat(ports))\n\t\t\t\t).then(() => {\n\t\t\t\t\treturn this.webbluetooth.readCharacteristicValue(UUID_CHARACTERISTIC_REMOTECONTROL)\n\t\t\t\t\t.then(data => {\n\t\t\t\t\t\treturn data;\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\n\t\t/**\n\t\t* Enable \"Power Voltage Measurements\" (five times a second) on a specific PORT (on both CHANNELS)\n\t\t* the values are stored in internal SBrick variables, to read them use _adc()\n\t\t* @param {array} portObjs - an array of port status objects { portId, mode: INPUT-OUTPUT}\n\t\t* @returns {promise} - undefined\n\t\t*/\n\t\t_pvm( portObjs ) {\n\t\t\treturn new Promise( (resolve, reject) => {\n\t\t\t\tif( portObjs !== null ) {\n\t\t\t\t\tresolve();\n\t\t\t\t} else {\n\t\t\t\t\treject('wrong input');\n\t\t\t\t}\n\t\t\t} ).then( ()=> {\n\t\t\t\tif( !Array.isArray(portObjs) ) {\n\t\t\t\t\tportObjs = [ portObjs ];\n\t\t\t\t}\n\t\t\t\tlet update_pvm = false;\n\t\t\t\tportObjs.forEach( (portObj) => {\n\t\t\t\t\tlet portId = portObj.portId;\n\t\t\t\t\tlet mode = portObj.mode;\n\t\t\t\t\tif( this.ports[portId].mode != mode ) {\n\t\t\t\t\t\tthis.ports[portId].mode = mode;\n\t\t\t\t\t\tupdate_pvm = true;\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\tif(update_pvm) {\n\t\t\t\t\tlet command = [CMD_PVM];\n\t\t\t\t\tlet srt = \"\";\n\t\t\t\t\tthis.ports.forEach( (port, i) => {\n\t\t\t\t\t\tif(port.mode==INPUT) {\n\t\t\t\t\t\t\tlet channels = this._getPortChannels(i);\n\t\t\t\t\t\t\tcommand.push(channels[0]);\n\t\t\t\t\t\t\tcommand.push(channels[1]);\n\t\t\t\t\t\t\tsrt += \" PORT\"+ i + \" (CH\" + channels[0] + \" CH\" + channels[1]+\")\";\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t\tthis.queue.add( () => {\n\t\t\t\t\t\treturn this.webbluetooth.writeCharacteristicValue(\n\t\t\t\t\t\t\tUUID_CHARACTERISTIC_REMOTECONTROL,\n\t\t\t\t\t\t\tnew Uint8Array(command)\n\t\t\t\t\t\t)\n\t\t\t\t\t\t.then( () => {\n\t\t\t\t\t\t\tthis._log( \"PVM set\" + ( srt==\"\" ? \" OFF\" : srt ) );\n\t\t\t\t\t\t});\n\t\t\t\t\t});\n\t\t\t\t\t// PVM has a delay before start to collect actual data\n\t\t\t\t\treturn this._delay(T_PVM);\n\t\t\t\t}\n\t\t\t\treturn false;\n\t\t\t});\n\t\t}\n\n\n\t\t/**\n\t\t* Get the SBrick battery voltage\n\t\t* @returns {number} - voltage in Volts\n\t\t*/\n\t\t_volt() {\n\t\t\treturn this._adc(CMD_ADC_VOLT).then( data => {\n\t\t\t\tlet volt = data.getInt16( 0, true );\n\t\t\t\treturn parseFloat( volt * 0.83875 / 2047.0 ); // V;\n\t\t\t} );\n\t\t}\n\n\t\t/**\n\t\t* Get the SBrick internal temperature\n\t\t* @returns {number} - temperature in Celsius\n\t\t*/\n\t\t_temp() {\n\t\t\treturn this._adc(CMD_ADC_TEMP).then( data => {\n\t\t\t\tlet temp = data.getInt16( 0, true );\n\t\t\t\treturn parseFloat(temp / 118.85795 - 160); // °C;\n\t\t\t} );\n\t\t}\n\n\t\t/**\n\t\t* Helper function to get ports Ids\n\t\t* @returns {boolean}\n\t\t*/\n\t\t_getPorts() {\n\t\t\treturn PORTS.map( function(obj) {return obj.portId;} );\n\t\t}\n\n\t\t/**\n\t\t* Helper function to find a port channel numbers\n\t\t* @param {number} portId - The index of the port in the this.ports array\n\t\t* @returns {array} - hexadecimal numbers of both channels\n\t\t*/\n\t\t_getPortChannels( portId ) {\n\t\t\treturn PORTS[portId].channelsId;\n\t\t}\n\n\t\t/**\n\t\t* Get the settings of a specific port\n\t\t* @returns {object} portId, direction, power\n\t\t*/\n\t\t_getPortData(portId) {\n\t\t\tconst port = this.ports[portId],\n\t\t\t\tdata = {\n\t\t\t\t\tportId:    portId,\n\t\t\t\t\tdirection: port.direction,\n\t\t\t\t\tpower:     port.power,\n\t\t\t\t\tmode:      port.mode\n\t\t\t\t};\n\t\t\treturn data;\n\t\t}\n\n\t\t/**\n\t\t* Error management\n\t\t* @param {string} msg - message to print or throw\n\t\t*/\n\t\t_error( msg ) {\n\t\t\tif(this._debug) {\n\t\t\t\tconsole.debug(msg);\n\t\t\t} else {\n\t\t\t\tthrow msg;\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t* Log\n\t\t* @param {string} msg - message to print\n\t\t*/\n\t\t_log( msg ) {\n\t\t\tif(this._debug) {\n\t\t\t\tconsole.log(msg);\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t* Delay promise\n\t\t* @param {number} t - time in milliseconds\n\t\t*/\n\t\t_delay(t) {\n\t\t\treturn new Promise(function(resolve) {\n\t\t \t\tsetTimeout(resolve, t)\n\t\t \t});\n\t\t}\n\n\t\t/**\n\t\t* Trigger event on body to notify listeners that a port's values have changed\n\t\t* @param {object} portData - The data ({portId, power, direction}) for the port that was changed\n\t\t* @returns {undefined}\n\t\t*/\n\t\t_sendPortChangeEvent( portData ) {\n\t\t\tconst event = new CustomEvent('portchange.sbrick', {detail: portData});\n\t\t\tdocument.body.dispatchEvent(event);\n\t\t}\n\n\t\t/**\n\t\t* Check if ports are busy\n\t\t* @returns {boolean}git\n\t\t*/\n\t\t_portsIdle(ports) {\n\t\t\tlet allAreIdle = true;\n\t\t\tports.forEach( (port) => {\n\t\t\t\tif (this.ports[port].busy) {\n\t\t\t\t\tallAreIdle = false;\n\t\t\t\t}\n\t\t\t});\n\t\t\treturn allAreIdle;\n\t\t}\n\n\t\t/**\n\t\t* Set all ports to busy\n\t\t* @returns {undefined}\n\t\t*/\n\t\t_setPortsBusy(ports, status) {\n\t\t\tports.forEach( (port) => {\n\t\t\t\tthis.ports[port].busy = status;\n\t\t\t});\n\t\t};\n\n\t}\n\n\treturn SBrick;\n\n})();\n","import React from 'react';\nimport styled from 'styled-components';\nimport IconButton from '@material-ui/core/IconButton';\nimport Fab from '@material-ui/core/Fab';\n\nexport const AppContainer = styled.div`\n  height: 100vh;\n  box-sizing: border-box;\n  display: flex;\n  align-items: center;\n  flex-direction: column;\n`\n\nexport const Header = styled.div`\n  width: 100vw;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n`\n\n\nexport const ControlWrapper = styled.div`\n  width: 100vw;\n  height: 100%;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n`\n\nexport const Title = styled.h3`\n  color: white;\n  text-align: center;\n  font-size: 3vw;\n  letter-spacing: .1em;\n  font-family:  'Lato', san-serif;\n`\n\nexport const BluetoothIconButton = styled(({connected, ...props }) => <IconButton {...props} />)`\n  && {\n    margin: 30px;\n    color: ${props => props.connected ? \"#8db945\" : \"white\"};\n  }\n`\n\nexport const FullScreenIconButton = styled(IconButton)`\n  && {\n    margin: 30px;\n    color: white;\n  }\n`\n\nexport const LightsIconButton = styled(({lights, ...props }) => <Fab {...props} />)`\n  && {\n      color: ${props => props.lights ? \"#8db945\" : \"black\"};\n      width: 38px;\n      height: 50px;\n      position: relative;\n      left: 18%;\n      top: 3%;\n      background-color: white;\n  }\n`\n","import styled from 'styled-components';\n\nexport const ControllerWrapper = styled.div`\n  width: 150px;\n  height: 150px;\n  display: flex;\n  justify-content: center;\n`\n\nexport const Controller = styled.input`\n  width: 100%;\n  boxShadow: inset 0px 1px 3px rgba(0, 0, 0, 0.3);\n  display: flex;\n  justify-content: center;\n  border: none;\n  transform: rotate(-90deg);\n  background: transparent;\n  font-size: 1em;\n  cursor: pointer;\n  -webkit-appearance: none;\n  background: transparent;\n\n    &:focus {\n      outline: none;\n    }\n\n    &::-webkit-slider-thumb {\n      -webkit-appearance: none;\n      border: 1px solid #000000;\n      height: 56px;\n      width: 56px;\n      border-radius: 50%;\n      background: #ffffff;\n      cursor: pointer;\n      margin-top: -14px;\n      box-shadow: 0px 1px 3px #000000, 0px 0px 0px #0d0d0d;\n    }\n\n    &::-webkit-slider-runnable-track {\n      height: 30px;\n      cursor: pointer;\n      box-shadow: 1px 1px 1px #000000, 0px 0px 1px #0d0d0d;\n      background: grey;\n      border-radius: 10px;\n      border: 0.4px solid #010101;\n\n    }\n  \n`\n","import React from \"react\";\nimport { ControllerWrapper, Controller } from \"./RangeController.s\";\n\nexport class RangeComponent extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      value: 0,\n      type: this.props.type\n    };\n    this.MIN_VALUE = \"-255\"\n    this.MAX_VALUE = \"255\"\n  }\n\n  handleOnChange = (e) => {\n    const { PORT1, PORT3, CW, CCW } = this.props.sbrick;\n    const port = this.props.left ? PORT3 : PORT1;\n    let direction = this.props.left \n      ? e.target.value < 0 ? CW : CCW\n      : e.target.value < 0 ? CCW : CW\n    this.setState({\n      value: e.target.value\n    })\n    this.props.sbrick.drive( port, direction, e.target.value )\n  }\n\n  setSbrickDriveValue = (val) => {\n    const { PORT1, PORT3, CW } = this.props.sbrick;\n    const port = this.props.left ? PORT3 : PORT1;\n    this.setState({value: val});\n    this.props.sbrick.drive( port, CW, val )\n  }\n\n  render() {\n  \n    return (\n      <ControllerWrapper>\n          <Controller\n            name='controller'\n            type='range'\n            min={this.MIN_VALUE}\n            max={this.MAX_VALUE}\n            value={this.state.value}\n            onChange={this.handleOnChange}\n            onTouchEnd={() => {\n              this.setSbrickDriveValue(0);\n            }}\n            onMouseUp={() => {\n              this.setSbrickDriveValue(0);\n            }}\n          />\n      </ControllerWrapper>\n    )\n  }\n}\n","export function fullScreen(value) {\n  return !!value ? closeFullscreen() : openCloseFullscreen()\n}\n\nfunction openCloseFullscreen() {\n  var elem = document.documentElement;\n  if (elem.requestFullscreen) {\n    elem.requestFullscreen();\n  } else if (elem.mozRequestFullScreen) { /* Firefox */\n    elem.mozRequestFullScreen();\n  } else if (elem.webkitRequestFullscreen) { /* Chrome, Safari and Opera */\n    elem.webkitRequestFullscreen();\n  } else if (elem.msRequestFullscreen) { /* IE/Edge */\n    elem.msRequestFullscreen();\n  }\n}\n\nfunction closeFullscreen() {\n  if (document.exitFullscreen) {\n    document.exitFullscreen();\n  } else if (document.mozCancelFullScreen) { /* Firefox */\n    document.mozCancelFullScreen();\n  } else if (document.webkitExitFullscreen) { /* Chrome, Safari and Opera */\n    document.webkitExitFullscreen();\n  } else if (document.msExitFullscreen) { /* IE/Edge */\n    document.msExitFullscreen();\n  }\n}\n","import React, { Component } from 'react';\nimport { SBrick } from '../lib/sbrick';\nimport { AppContainer, ControlWrapper, Title, Header, BluetoothIconButton, FullScreenIconButton, LightsIconButton } from './App.s';\nimport { RangeComponent } from '../components/RangeController/RangeController'; \nimport BluetoothIcon from '@material-ui/icons/Bluetooth';\nimport BluetoothConnectedIcon from '@material-ui/icons/BluetoothConnected';\nimport FullScreenIcon from '@material-ui/icons/Fullscreen';  \nimport FullScreenExitIcon from '@material-ui/icons/FullscreenExit'; \nimport LightsIcon from '@material-ui/icons/WbSunny';\nimport { fullScreen } from '../utils/fullscreen';\n\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      connected: false,\n      fullScreen: false,\n      lights: false,\n      leftMotor: 0,\n      rightMotor: 0,\n      sbrick: new SBrick(),\n    }\n  }\n\n  setConnect = (val) => {\n    this.setState({connected: val})\n  }\n\n  getBluetoothButton = () => {\n    return !!this.state.connected ? <BluetoothConnectedIcon /> : <BluetoothIcon />\n  }\n\n  getFullScrennButton = () => {\n    return this.state.fullScreen ?  <FullScreenExitIcon /> : <FullScreenIcon />\n  }\n\n  handleBluetoothButtonClick = () => {\n    !!this.state.connected ? this.state.sbrick.disconnect(this.setConnect) : this.state.sbrick.connect(this.setConnect)\n  }\n\n  handleFullScreenButtonClick = () => {\n    fullScreen(this.state.fullScreen)\n    this.setState({fullScreen: !this.state.fullScreen})\n  }\n\n  handleLightsButtonClick = () => {\n    const lightsPower = this.state.lights ? 0 : 255;\n    this.state.sbrick.drive( 0x00, this.state.sbrick.CW, lightsPower )\n    this.setState({lights: !this.state.lights})\n  }\n\n  render() {\n    return (\n      <AppContainer>\n        <Header>\n          <BluetoothIconButton \n            connected={this.state.connected} \n            onClick={() => this.handleBluetoothButtonClick()} >\n            { this.getBluetoothButton() }\n          </BluetoothIconButton>\n          <Title>Lego Controller</Title>\n          <FullScreenIconButton \n            onClick={() => this.handleFullScreenButtonClick()}>\n            { this.getFullScrennButton() }\n          </FullScreenIconButton>\n        </Header>\n        <LightsIconButton \n          lights={this.state.lights} \n          onClick={() => this.handleLightsButtonClick()}>\n          <LightsIcon fontSize=\"small\"  />\n        </LightsIconButton>\n        <ControlWrapper>\n          <RangeComponent sbrick={this.state.sbrick} left />\n          <RangeComponent sbrick={this.state.sbrick} right />\n        </ControlWrapper>\n      </AppContainer>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './view/App';\nimport * as serviceWorker from './serviceWorker';\nimport './index.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}